{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","pomodoro/BreakDurationUI.js","pomodoro/FocusDurationUI.js","pomodoro/ProgressBarUI.js","pomodoro/PlayPauseStopUI.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","BreakDurationUI","mouseClickHandler","breakTime","data-testid","type","onClick","style","pointerEvents","FocusDurationUI","focusTime","ProgressBarUI","focusCountdown","breakCountdown","progressBarValue","progressBarWidth","appStatus","pauseMessage","includes","message","timeSetting","remainingTime","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","PlayPauseStopUI","playPause","stop","aria-label","title","oi","Pomodoro","useState","setAppStatus","setFocusTime","setBreakTime","setProgressBarValue","setProgressBarWidth","setFocusCountdown","setBreakCountdown","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","currentValue","minutesAndSeconds","split","countDownValueSecs","parseFloat","newCountDownValue","progressBarIncrement","currentProgressBarValue","currentProgressBarWidth","Audio","play","event","buttonTestID","target","attributes","currentFocusTime","max","min","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb42f2dc.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\n\r\n// Break duration part\r\nfunction BreakDurationUI({mouseClickHandler,breakTime,minutesToDuration}) {\r\n    return (\r\n        <div className=\"col\">\r\n            <div className=\"float-right\">\r\n                <div className=\"input-group input-group-lg mb-2\">\r\n                    <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                        Break Duration: {minutesToDuration(breakTime)}\r\n                    </span>\r\n                    <div className=\"input-group-append\">\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            data-testid=\"decrease-break\"\r\n                            onClick = {mouseClickHandler}\r\n                        >\r\n                            <span style={{pointerEvents:\"none\"}} className=\"oi oi-minus\" />\r\n                        </button>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            data-testid=\"increase-break\"\r\n                            onClick = {mouseClickHandler}\r\n                        >\r\n                            <span style={{pointerEvents:\"none\"}} className=\"oi oi-plus\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BreakDurationUI;","import React from \"react\";\r\n\r\n// Focus duration part\r\nfunction FocusDurationUI({mouseClickHandler,focusTime,minutesToDuration}) {\r\n    return (\r\n        <div className=\"col\">\r\n            <div className=\"input-group input-group-lg mb-2\">\r\n                <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n                    Focus Duration: {minutesToDuration(focusTime)}\r\n                </span>\r\n                <div className=\"input-group-append\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        data-testid=\"decrease-focus\"\r\n                        onClick = {mouseClickHandler}\r\n                    >\r\n                        <span style={{pointerEvents:\"none\"}} className=\"oi oi-minus\" />\r\n                    </button>              \r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        data-testid=\"increase-focus\"\r\n                        onClick = {mouseClickHandler}\r\n                    >\r\n                        <span style={{pointerEvents:\"none\"}} className=\"oi oi-plus\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FocusDurationUI;","import React from \"react\";\r\n\r\n// Progressbar part\r\nfunction ProgressBarUI({minutesToDuration,focusTime,focusCountdown,breakTime, breakCountdown,progressBarValue,progressBarWidth,appStatus}) {\r\n    // This message appears only if the appStatus is pauseFocus or pauseBreak\r\n    const pauseMessage = (appStatus.includes(\"pause\") ? \"PAUSED\" : \"\")\r\n    // Checking if the app is in the focus mode\r\n    const message = (appStatus.includes(\"countingFocus\") || appStatus.includes(\"pauseFocus\")) ? \"Focusing for \" : \"On Break for \";\r\n    const timeSetting = (appStatus.includes(\"countingFocus\") || appStatus.includes(\"pauseFocus\")) ? minutesToDuration(focusTime) : minutesToDuration(breakTime);\r\n    const remainingTime = (appStatus.includes(\"countingFocus\") || appStatus.includes(\"pauseFocus\")) ? focusCountdown : breakCountdown;\r\n    \r\n    if (appStatus == \"setup\") {\r\n        return \"\"\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className=\"row mb-2\">\r\n                    <div className=\"col\">\r\n                        <h2 data-testid=\"session-title\">{message} {timeSetting} minutes</h2>\r\n                        <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                        {remainingTime} remaining\r\n                        </p>\r\n                        <h1>{pauseMessage}</h1>\r\n                    </div>\r\n                </div>\r\n            <div className=\"row mb-2\">\r\n                <div className=\"col\">\r\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                        <div\r\n                            className={\"progress-bar\"}\r\n                            role=\"progressbar\"\r\n                            aria-valuemin=\"0\"\r\n                            aria-valuemax=\"100\"\r\n                            aria-valuenow={progressBarValue} \r\n                            style={{ width: progressBarWidth }}\r\n                        />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ProgressBarUI;","import React from \"react\";\r\n\r\n// Play - Pause - Stop button\r\nfunction PlayPauseStopUI({playPause,appStatus,classNames,stop}) {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n                <div\r\n                    className=\"btn-group btn-group-lg mb-2\"\r\n                    role=\"group\"\r\n                    aria-label=\"Timer controls\"\r\n                >\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        data-testid=\"play-pause\"\r\n                        title=\"Start or pause timer\"\r\n                        onClick={playPause}\r\n                    >\r\n                    <span\r\n                        className={classNames({\r\n                        oi: true,\r\n                        \"oi-media-play\": !appStatus.includes(\"counting\"),\r\n                        \"oi-media-pause\": appStatus.includes(\"counting\"),\r\n                        })}\r\n                    />\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-secondary\"\r\n                        title=\"Stop the session\"\r\n                        onClick={stop}\r\n                    >\r\n                        <span className=\"oi oi-media-stop\" />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayPauseStopUI;","import React, { useState,useEffect } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {secondsToDuration,minutesToDuration} from \"../utils/duration\";\nimport BreakDurationUI from \"./BreakDurationUI\";\nimport FocusDurationUI from \"./FocusDurationUI\";\nimport ProgressBarUI from \"./ProgressBarUI\";\nimport PlayPauseStopUI from \"./PlayPauseStopUI\";\n\n\nfunction Pomodoro() {\n  const [appStatus,setAppStatus] = useState(\"setup\")\n  const [focusTime,setFocusTime] = useState(25);\n  const [breakTime,setBreakTime] = useState(5);\n  const [progressBarValue,setProgressBarValue] = useState(0);\n  const [progressBarWidth,setProgressBarWidth] = useState(\"0%\");\n  const [focusCountdown,setFocusCountdown] = useState(minutesToDuration(focusTime));\n  const [breakCountdown,setBreakCountdown] = useState(minutesToDuration(breakTime));\n\n  // Decreases timer values, switches countdown mode (focus->break->focus)\n  function processCountdown () {\n    if (appStatus == \"countingFocus\") {\n      setFocusCountdown((currentValue) => {\n        // Countdown values are in \"duration\" format, hence back and forth conversion is required\n        const minutesAndSeconds = currentValue.split(\":\");\n        const countDownValueSecs = parseFloat(minutesAndSeconds[0])*60 + parseFloat(minutesAndSeconds[1]);\n        const newCountDownValue = secondsToDuration((countDownValueSecs - 1));\n        const progressBarIncrement = 100 / (focusTime*60);\n        setProgressBarValue((currentProgressBarValue) => parseFloat(currentProgressBarValue) + progressBarIncrement);\n        setProgressBarWidth((currentProgressBarWidth) => parseFloat(currentProgressBarWidth) + progressBarIncrement + \"%\");\n        // Switching the countdown mode\n        if (countDownValueSecs == 1) {\n          setAppStatus(\"countingBreak\");\n          setProgressBarValue(0);\n          setProgressBarWidth(\"0%\");\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        }\n        return newCountDownValue;\n      })\n    } else {\n      setBreakCountdown((currentValue) => {\n        // Countdown values are in \"duration\" format, hence back and forth conversion is required\n        const minutesAndSeconds = currentValue.split(\":\");\n        const countDownValueSecs = parseFloat(minutesAndSeconds[0])*60 + parseFloat(minutesAndSeconds[1]);\n        const newCountDownValue = secondsToDuration((countDownValueSecs - 1));\n        const progressBarIncrement = 100 / (breakTime*60);\n        setProgressBarValue((currentProgressBarValue) => parseFloat(currentProgressBarValue) + progressBarIncrement);\n        setProgressBarWidth((currentProgressBarWidth) => parseFloat(currentProgressBarWidth) + progressBarIncrement + \"%\");\n        // Resetting the countdown\n        if (countDownValueSecs == 1) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          setFocusCountdown(minutesToDuration(focusTime));\n          setBreakCountdown(minutesToDuration(breakTime));\n          setProgressBarWidth(\"0%\");\n          setProgressBarValue(0);\n          setAppStatus(\"countingFocus\");\n        }\n        return newCountDownValue;\n      })\n    }\n  }\n\n  // Starting the countdown if appStatus is \"countingFocus\" or \"countingBreak\"\n  useInterval(\n    () => {\n      processCountdown() \n    },\n    appStatus.includes(\"counting\") ? 1000 : null\n  );\n  \n\n\n  // App status; note: countingFocus -> countingBreak is done in processCountdown() function\n  function playPause() {\n    switch (appStatus) {\n      case \"setup\":\n        setAppStatus(\"countingFocus\");\n        break;\n      case \"countingFocus\":\n        setAppStatus(\"pauseFocus\");\n        break;\n      case \"countingBreak\":\n        setAppStatus(\"pauseBreak\");\n        break;\n      case \"pauseFocus\":\n        setAppStatus(\"countingFocus\")\n        break;\n      case \"pauseBreak\":\n        setAppStatus(\"countingBreak\")\n        break;\n    }\n  }\n\n  // Stop button only (resetting all initial values)\n  function stop() {\n    setAppStatus(\"setup\");\n    setFocusTime(25);\n    setBreakTime(5);\n    setFocusCountdown(minutesToDuration(focusTime));\n    setBreakCountdown(minutesToDuration(breakTime));\n    setProgressBarWidth(\"0%\");\n    setProgressBarValue(0);\n  }\n\n  const mouseClickHandler = (event) => {\n    const buttonTestID = event.target.attributes[\"data-testid\"].value;\n    if (appStatus == \"setup\") {\n      switch (buttonTestID) {\n        case \"decrease-focus\":\n          setFocusTime((currentFocusTime) => Math.max(5,currentFocusTime - 5));\n          setFocusCountdown(minutesToDuration(Math.max(5,parseFloat(focusCountdown) - 5)));\n          break\n        case \"increase-focus\":      \n          setFocusTime(Math.min(60,focusTime + 5));\n          setFocusCountdown(minutesToDuration(Math.min(60,parseFloat(focusCountdown) + 5)));\n          break          \n        case \"decrease-break\":\n            setBreakTime(Math.max(1,breakTime - 1));\n            setBreakCountdown(minutesToDuration(Math.max(1,parseFloat(breakTime) - 1)));\n            break          \n        case \"increase-break\":\n            setBreakTime(Math.min(15,breakTime + 1));\n            setBreakCountdown(minutesToDuration(Math.min(15,parseFloat(breakTime) + 1)));\n            break          \n      }\n    }\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDurationUI \n          mouseClickHandler={mouseClickHandler} \n          focusTime={focusTime} \n          minutesToDuration={minutesToDuration}\n        />\n        <BreakDurationUI \n          mouseClickHandler={mouseClickHandler} \n          breakTime={breakTime} \n          minutesToDuration={minutesToDuration}\n        />\n      </div>\n        <PlayPauseStopUI \n          playPause={playPause} \n          appStatus={appStatus}\n          classNames={classNames}\n          stop={stop}\n      /> \n      <ProgressBarUI \n        minutesToDuration={minutesToDuration}\n        focusTime={focusTime}\n        focusCountdown={focusCountdown}\n        breakTime={breakTime}\n        breakCountdown={breakCountdown}\n        progressBarValue={progressBarValue} \n        progressBarWidth={progressBarWidth}\n        appStatus={appStatus}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n\n\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}